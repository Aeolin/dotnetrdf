dotNetRDF
=========

A Library for RDF manipulation and parsing in .Net using C# 3.0

Robert Vesse 2009-10
rvesse@vdesign-studios.com

Change Log
----------

This represents a summary of additions, changes and removals for the 0.4.0 release of dotNetRDF

Added
- Additional N3 Feature Support
 - Variable Nodes
 - New SimpleN3RulesReasoner which can process simple N3 rules of the form { } => { }
 - Notation 3 Parser supports Variables, @forSome and @forAll fully
- Graph Difference Algorithms
- More Extension Methods
 - LoadFromFile and LoadFromUri for Graphs and Triple Stores
 - ToLiteral for byte and sbyte
 - ToLiteralDate and ToLiteralTime for DateTime
- ASP.Net Integration
 - DatasetHandler for serving RDF datasets
 - QueryHandler, UpdateHandler and SparqlServer all now return SPARQL Service Description when appropriate
- Configuration API
 - dnr:SparqlDataset and dnr:usingDataset properties
 - All new IGenericIOManager implementations - Fuseki, In-Memory and Read-Only - are now loadable via the ConfigurationLoader
 - dnr:enableCors property for disabling CORS Headers on HTTP Handlers
- Query
 - GROUP BY is now supported in subqueries
 - Scalar Arguments for aggregates added when in 1.1 Extended mode (only GROUP_CONCAT allows scalar arguments in 1.1 mode)
 - Added new SPARQL 1.1 functions
  - String Functions - CONCAT, CONTAINS, ENCODE_FOR_URI, LCASE, STRENDS, STRLEN, STRSTARTS, SUBSTR, UCASE
  - Date Time Functions - DAY, HOURS, MINUTES, MONTH, NOW, SECONDS, TIMEZONE, TZ and YEAR
  - Numeric Functions - ABS, CEIL, FLOOR, ROUND and ISNUMERIC
  - Hash Functions - MD5, SHA1, SHA256, SHA384, SHA512
- Update
 - Added support for HTTP PATCH operation to SPARQL Uniform HTTP Protocol implementations
- Storage
 - Expanded the IGenericIOManager interface to include methods for deletings graphs and listing graphs
 - Connector for Fuseki
 - Connector which wraps an in-memory store (i.e. a IInMemoryQueryableStore) or a SPARQL dataset (i.e. a ISparqlDataset)
 - Connector which wraps any IGenericIOManager and makes it read-only
- New HtmlSchemaWriter outputs HTML versions of ontologies in a schema specification style rather than as a table like the existing HtmlWriter

Changed
- Bug Fixes
 - Notation 3 Parser allows variable quantification directives in Graph Literals
 - Queries with a LIMIT modifier containing FILTERs were optimised for lazy evaluation but would return incorrect results
   in some cases
 - Queries with a DISTINCT modifer and a LIMIT were optimised for lazy evaluation when they shouldn't have been
 - Queries containing GRAPH clauses no longer unintentionally introduce a Product in some places
 - RDF/XML parser now correctly treats empty elements with rdf:datatype as literal properties rather than empty properties
 - SPARQL Query Parser now parses correctly if first item in the WHERE clause is a nested graph pattern
 - Non-Leviathan Query Processors record the time the Query took to execute
 - Some bug fixes around LiteralNode value comparisons regarding equivalences between .Net types and XML Schema types
 - Validation of Language Tags was overzealous and rejected some valid language tags and in some places language 
   tags weren't validated when they should have been
- General Improvements
 - Internal restructuring of how MIME Types are managed
  - Allows for new MIME Types, File Extensions and parsers to be registered with the API and used automatically where appropriate
 - Can use dotnetrdf:default-graph as a URI to explicitly access the default unnamed graph in a SPARQL dataset
- Parsing
 - All Parsers should now throw RdfParseExceptions when null Graphs, Stores, filenames, streams etc are passed as arguments
 - SparqlRdfParser can now be created to use a specific RDF Parser rather than just auto-detection
 - UriLoader Caching improved
  - URIs are santised when being cached
  - Data is cached under both the request and response URIS
  - Extracted existing private implementation into an interface so users can choose to slot in alternative caching mechanisms if desired
 - Parsers all open files with the appropriate encoding where possible
  - Streams in the wrong encoded will cause parsers to issue a warning
 - Added Warning events to ISparqlResultsReader, ISparqlResultsWriter, SparqlQueryParser and SparqlUpdateParser
- Query Improvements
 - Leviathan SPARQL engine now operates over an ISparqlDataset which is an abstraction between the data and the
   SPARQL engine which allows for out of memory datasets to be queried and updated with Leviathan
 - Reverse Translation from ISparqlAlgebra to SparqlQuery
 - Optimisation for queries using ORDER BY under some circumstances
 - Improved SparqlParameterizedString
  - Can now set values for Variables which are substituted into the query when you call ToString()
  - Has own Namespace Map allowing prefixes to be registered programatically and have the code take care of generating the PREFIX declarations
 - Improved ISparqlExpression interface to allow for traversing of expression trees and custom formatting
 - Changes to support latest 1.1 Draft Specifications
  - IN and NOT IN for SPARQL now support any expression in the SET and evaluate properly using SPARQL value equality
  - COALESCE now errors if none of the arguments evaluate to a non-null value
- Update Improvements
 - WHERE clauses in Update Commands are now optimised
 - Added support for new features latest drafts of the SPARQL 1.1 Update specification
- Writing Improvements
 - Writers all try to ensure correct encoding where possible (most already did this)
- ASP.Net Improvements
 - All HTTP Handlers output CORS headers so RDF/SPARQL content is accessible to JS client (may be disabled 
   using dnr:enableCors if desired on a per HTTP Handler basis)
 - SparqlServer now supports omitting any of the processors (provided at least one is specified) so you can create
   endpoints with some features explicitly disabled
- Obsoleted Features
 - All ISqlIOManager features marked as obsolete (but still allowed until 0.5.x most likely)
 - RdfXmlTreeWriter and FastRdfXmlWriter marked as obsolete

Removed
- Obsolete VDS.RDF.Web classes removed
- Removed obsolete methods related to Labyrinth SPARQL engine
- Removed dataset management methods from ITripleStore and implementations
- IBinaryOperator marker interface removed as ISparqlExpression.Type can now be used to determine whether an expression
  is a binary operator

   




