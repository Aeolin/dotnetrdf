dotNetRDF
=========

A Library for RDF manipulation and parsing in .Net using C# 3.0

Robert Vesse 2009-10
rvesse@vdesign-studios.com

Change Log
----------

This represents a summary of additions, changes and removals for the 0.4.0 release of dotNetRDF

Added
- Support for Variable Nodes
- Graph Difference Algorithm
- New SimpleN3RulesReasoner which can process simple N3 rules of the form { } => { }
- More Extension Methods
 - LoadFromFile and LoadFromUri for Graphs and Triple Stores
 - ToLiteral for byte and sbyte
 - ToLiteralDate and ToLiteralTime for DateTime
- New HTTP Handlers for ASP.Net
 - DatasetHandler for serving RDF datasets
- Additional Configuration API for new features
 - dnr:SparqlDataset and dnr:usingDataset properties
- Storage
 - Expanded the IGenericIOManager interface to include methods for deletings graphs and listing graphs
 - Connector for Fuseki
 - Connector which wraps an in-memory store (i.e. a IInMemoryQueryableStore) or a SPARQL dataset (i.e. a ISparqlDataset)
 - Connector which wraps any IGenericIOManager and makes it read-only

Changed
- Bug Fixes
 - Notation 3 Parser allows variable quantification directives in Graph Literals
 - Queries with a LIMIT modifier containing FILTERs were optimised for lazy evaluation but would return incorrect results
   in some cases
 - Queries with a DISTINCT modifer and a LIMIT were optimised for lazy evaluation when they shouldn't have been
 - Queries containing GRAPH clauses no longer unintentionally introduce a Product in some places
 - RDF/XML parser now correctly treats empty elements with rdf:datatype as literal properties rather than empty properties
 - SPARQL Query Parser now parses correctly if first item in the WHERE clause is a nested graph pattern
 - Non-Leviathan Query Processors record the time the Query took to execute
- Parsing
 - Notation 3 Parser supports Variables, @forSome and @forAll fully
 - All Parsers should now throw RdfParseExceptions when null Graphs, Stores, filenames, streams etc are passed as arguments
 - SparqlRdfParser can now be created to use a specific RDF Parser rather than just auto-detection
 - UriLoader Caching improved
  - URIs are santised when being cached
  - Data is cached under both the request and response URIS
  - Extracted existing private implementation into an interface so users can choose to slot in alternative caching mechanisms if desired
- Query Improvements
 - Leviathan SPARQL engine now operates over an ISparqlDataset which is an abstraction between the data and the
   SPARQL engine which allows for out of memory datasets to be queried and updated with Leviathan
 - Reverse Translation from ISparqlAlgebra to SparqlQuery
 - Optimisation for queries using ORDER BY under some circumstances
 - Improved SparqlParameterizedString
  - Can now set values for Variables which are substituted into the query when you call ToString()
  - Has own Namespace Map allowing prefixes to be registered programatically and have the code take care of generating the PREFIX declarations
- Update Improvements
 - WHERE clauses in Update Commands are now optimised
 - Added support for new features latest drafts of the SPARQL 1.1 Update specification
- ASP.Net Improvements
 - All HTTP Handlers output CORS headers so RDF/SPARQL content is accessible to JS clients
 - SparqlServer now supports omitting any of the processors (provided at least one is specified) so you can create
   endpoints with some features explicitly disabled

Removed
- Obsolete VDS.RDF.Web classes removed
- Removed obsolete methods related to Labyrinth SPARQL engine
- Removed dataset management methods from ITripleStore and implemenations

   




