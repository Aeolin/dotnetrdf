dotNetRDF
=========

A Library for RDF manipulation and parsing in .Net using C# 3.0

Version 0.4.0 Beta

Robert Vesse 2009-10
rvesse@vdesign-studios.com

License
-------

dotNetRDF is licensed under the GNU GPL Version 3

Alternatively you may use it under the GNU Lesser GPL Version 3 or under the MIT license

If none of these licenses are suitable for your intended use please contact us to discuss
alternative terms

Usage
-----

To use this library first unzip to a directory on your computer.  Then Add a Reference and use the Browse tab
to find the directory where you unzipped the archive and select dotNetRDF.dll
If you have downloaded the full source for the Project then you can add the Project to your Solution and then 
use Project references instead.

dotNetRDF includes intellisense for all classes providing that the dotNetRDF.XML file is located in the 
same directory as the DLL file.

To use classes from the library it is generally easiest to import the namespaces you need eg.

C#
using VDS.RDF;

VB
Imports VDS.RDF

Please see the API at http://www.dotnetrdf.org/content.asp?pageID=API for further details on Namespaces,
Classes, Methods etc

Requirements
------------

To use this library you will need .Net Framework 3.5 SP1 and you may need to install/have available the 
following third party libraries:
- MySQL Connector.Net 6.0.3 which can be obtained from http://dev.mysql.com/downloads/connector/net/
- Virtuoso ADO.Net Provider which can be obtained from http://docs.openlinksw.com/virtuoso/virtclientref.html
- JSON.Net 3.5r7 which can be obtained from http://www.codeplex.com/Json
- HtmlAgilityPack 1.4.0 Stable which can be obtained from http://www.codeplex.com/htmlagilitypack

The relevant DLLs (HtmlAgilityPack.dll, MySql.Data.dll, Newtonsoft.Json.dll and virtado3.dll) are included with
this release and if you wish to use the library you may need to reference these DLLs as well to ensure it is available in your
project for dotNetRDF to use.
If you have downloaded the full source code for the Library you can add a Project Reference to your Solution
instead of referencing the DLL directly.  If you do this Visual Studio should automatically copy the 
relevant DLLs into your output directory if they are required.

Known Issues
------------

We are aware of the following issues with the library.  Please remember that this is an Alpha release and so
there are things that may be buggy still and the API is subject to change at our discretion.
 
Query and Update
- Leviathan passes the entire SPARQL 1.0 Test Suite except three of the normalization tests - this is due to how
  .Net handles normalization esp. wrt. URIs
- ISparqlDataset is not currently thread safe - queries/updates executing on different threads against the same
  dataset may interfere with each other
- SPARQL 1.1 Support is as close to the editors drafts at the time of release.  Majority of the test suite is passed
  but we fail 20 and ignore a further 11 of 308 tests due to the following issues:
  - Property Path semantics have changed since the previous drafts but our implementation has not so we particularly
    fail tests involving variable and zero length paths
  - Blank Nodes used as wildcards in INSERT/DELETE commands is not supported as it is unclear whether the WG
    will endorse this usage or not.  If they do the feature presents a significant implementation hurdle which
    is why it is not currently implemented
  - There are some tests which use syntax which is invalid according to the current drafts so we ignore these tests

Storage
- SQL Storage is officially deprecated though still usable - will be removed/rewritten entirely in future releases
- Virtuoso support is seriously broken due to an issue with the Virtuoso ADO.Net provider
 
 Change History
 --------------
 
 Please see ChangeLog.txt included in this release
 
 Release History
 ---------------
 
 31/07/2009 - First public Alpha release (Version 0.1.0 Alpha)
 
 03/08/2009 - Rerelease to fix a bug with SQL based storage which occurs when multi-threaded writing is performed
 
 25/09/2009 - Release of Version 0.1.1 Alpha (Build 0.1.1.18640)
 
 5/10/2009 - Re-release of Version 0.1.1 Alpha (Build 0.1.1.20361) which fixes issues with Blank Node IDs and Fast writers when Compression Level is None
 
 27/11/2009 - Release of Version 0.1.2 Alpha (Build 0.1.2.16009)
 
 18/11/2009 - Release of Version 0.1.3 Alpha (Build 0.1.3.20723)
 
 3/2/2010 - Release of Version 0.2.0 Alpha (Build 0.2.0.27063)
 
 11/3/2010 - Release of Version 0.2.1 Alpha (Build 0.2.1.24471)
 
 16/4/2010 - Release of Version 0.2.2 Alpha (Build 0.2.2.24625)
 
 10/8/2010 - Release of Version 0.3.0 Alpha (Build 0.3.0.23092)
 
 8/10/2010 - Release of Version 0.3.1 Alpha (Build 0.3.1.20277)
 
 ?/2/2011 - Release of Version 0.4.0 Beta (Build 0.4.0.?)
 
Acknowledgements
----------------

Uses code (3rd Party Libraries) from the following sources:
-MySQL Connector.Net from MySQL AB http://www.mysql.org
-JSON.Net from James Newton-King http://james.newtonking.com
-Virtuoso ADO.Net Provider from OpenLink Software http://www.openlinksw.com
-HtmlAgilityPack from Simon Mourier http://www.codeplex.com/htmlagilitypack

Uses code (embedded in the library) from the following sources:
-HashLib http://hashlib.codeplex.com/

Thanks to the following people who have helped in the development process or whose suggestions have led to 
improvements in the code:
- Eamon Nerbonne for the BlockingStreamReader fix (http://eamon.nerbonne.org/) which is much nicer than the
  alternative of pre-caching in a MemoryStream
- Hugh Williams and Jacqui Hand of OpenLink Software (http://www.openlinksw.com) for helping me resolve some
  issues with their ADO.Net provider including promptly providing me with a fixed version once the issue
  I'd identified had been traced to it's cause and extending my evaluation license so I could build the code
- Toby Inkster (http://tobyinkster.co.uk/) for providing me with some TriX extensibility stylesheets that I 
  could use to test my TriX parser
- Marek Safar from the Mono project for fixing the bug in gmcs I identified which meant I couldn't compile
  a Mono build of dotNetRDF
- Andy Seaborne and Steve Harris for excellent answers to various SPARQL and ARQ function library related questions 
  which have contributed to resolving various issues in the Leviathan engine and adding the ARQ function library support
- Peter Kahle for his efforts in producing a Windows Phone 7 version of the library
- The SPARQL Working Group for useful feedback and responses to my comments
- The following people who have contributed bug reports and patches on the mailing lists:
 - Tana Isaac
 - Koos Strydoom
 - Alexander Sidorov
 - Michael Friis
 - Bob DuCharme
 - Alexander Zapirov
 - Sergey Novikov
 - Jeen Broekstra
 - Robert P DeCarlo
 - Clive Emberey
 - Anton Andreev
 - Steve Fraleigh